# WalletFinal

## Overview
This is a simple Spring Boot application with a basic REST endpoint.

#Note:
* walletFinal.iml: IDE-specific files.
* DeveloperAWS.pem: Sensitive key file (add to .gitignore and manage securely).

## Setup and Run
To run the project, use one of the following:

1.Via Maven:mvn spring-boot:run
2.Via JAR File: java -jar target/walletFinal-0.0.1-SNAPSHOT.jar
*****************************************************************************************

### Prerequisites
- Java 11 or higher
- Maven 3.6+
- AWS EC2 access (for deployment)

*****************************************************************************************

### Steps to Run Locally
1. Clone the repository:

git clone  cd walletFinal

2. Build the project:

mvn clean install

3. Run the application:

mvn spring-boot:run

4. Access the application at `http://localhost:8081/`.


*****************************************************************************************

### AWS Deployment
1. Package the application:

mvn package

2. Transfer the JAR to the EC2 instance: connect and upload: On Terminal 2

scp -i "DeveloperAWS.pem" target/walletFinal-0.0.1-SNAPSHOT.jar ec2-user@<EC2_PUBLIC_IP>:~

(this is:  scp -i key.pem laptop_path_jar ec2_instance_path_online)
(ec2-user@<EC2_PUBLIC_IP> --canBe-->  ec2-user@54.198.235.227)


3. Connect to the EC2 instance: On Terminal 1

ssh -i "DeveloperAWS.pem" ec2-user@<EC2_PUBLIC_IP>
(ec2-user@<EC2_PUBLIC_IP> --canBe-->  ec2-user@54.198.235.227)

4. Run the application in the background: on Terminal 1
ls
(check java version if not present install it)

nohup java -jar walletFinal-0.0.1-SNAPSHOT.jar &


5. Access the application at `http://<EC2_PUBLIC_IP>:8081/`.

### Notes
- Replace `<repository-url>` and `<EC2_PUBLIC_IP>` with actual values.
- Manage sensitive files like `DeveloperAWS.pem` securely.


**********************************************************************************************************************************************



Amazon EC2 instance: copy Public IPv4 address to paste on the browser
54.198.235.227

for local port 8081
54.198.235.227:8081

"app start and play"


**********************************************************************************************************************************************

Git Ignore files:-

1. "*.pem" : Purpose: Sensitive AWS key.
2. "target/": Purpose: Contains compiled artifacts and should not be included in version control.
3. ".idea/": Purpose: IDE-specific configuration for IntelliJ IDEA.
4. "*.iml": : The *.iml files are IntelliJ IDEA Module Files. These files store metadata and settings for your project modules, such as:

                  Module name.
                  Dependencies specific to the module.
                  Project-specific configurations.

              They are IDE-specific and do not contribute to the application's functionality. These files are automatically generated by IntelliJ IDEA and are not needed for other developers using a different IDE.

5. "mvnw and mvnw.cmd" : Purpose: These are Maven wrapper scripts for users who don't have Maven installed.Yes, they should be included in the repository along with the .mvn directory. This ensures that any contributor can build the project regardless of their Maven setup.

**********************************************************************************************************************************************

How to Manage Maven Wrapper Files?

    Include in Repository:
        Ensure mvnw, mvnw.cmd, and the .mvn directory are version-controlled.

    Regenerate if Necessary:
        To regenerate the Maven Wrapper:

    mvn wrapper:wrapper

Exclude Target Files:

    Add this to .gitignore to exclude unnecessary files:

    target/

CI/CD Integration:

    Use the Maven Wrapper in CI/CD pipelines to ensure consistent builds:

        ./mvnw clean install

By including the Maven Wrapper, you make your project more developer-friendly and ensure consistent builds across different environments.



**********************************************************************************************************************************************

Why we use the  following :-
1. spring-boot-starter-thymeleaf
2. aws-java-sdk