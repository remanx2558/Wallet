package com.example.Wallet.repository;

import java.util.List;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.PagingAndSortingRepository;

import com.example.Wallet.entity.TransModel;

//It is used for performing CRUD operations and pagination on the TransModel entity.
//PagingAndSortingRepository<TransModel, Integer> interface provides additional functionality
// on top of the basic CRUD operations inherited from the JpaRepository interface.
public interface TransRepository extends JpaRepository<TransModel,Integer> ,PagingAndSortingRepository<TransModel,Integer> {
    //findAll(Pageable pageable): Retrieves all entities sorted by the given Pageable object.
    //findAll(Sort sort): Retrieves all entities sorted by the given Sort object.
   // findAllById(Iterable<ID> ids, Pageable pageable): Retrieves a page of entities with the specified IDs and Pageable object.
    //findAllById(Iterable<ID> ids, Sort sort): Retrieves entities with the specified IDs and sorts them according to the given Sort object.
    public List<TransModel> findByTransactionid(Integer transactionid);
    //While the PagingAndSortingRepository<TransModel, Integer> interface provides generic methods
    // for basic CRUD operations, pagination, and sorting, it doesn't automatically generate queries
    // based on property names. It requires you to define custom query methods if you want to perform
    // more specific filtering or searching based on properties that are not covered by the generic methods.
    //
    //So, even though the PagingAndSortingRepository provides many built-in methods, the findByPayeephone method is necessary
    // if you want to have a specific query based on the payeephone property. The implementation is generated by
    // Spring Data JPA behind the scenes, allowing you to use the method directly in your code without providing its implementation yourself.
    //
    //
    //By combining the generic methods from PagingAndSortingRepository and the custom query methods like findByPayeephone,
    // you have more flexibility in performing CRUD operations, pagination, sorting, and custom querying in your TransRepository interface.
    public List<TransModel> findByPayeephone(Integer payeephone);
    public List<TransModel> findByPayerphone(Integer payerphone);
}
